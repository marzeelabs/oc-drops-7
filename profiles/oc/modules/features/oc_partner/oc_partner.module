<?php
/**
 * @file
 * Code for the OC Partner feature.
 */

include_once('oc_partner.features.inc');

/**
 * Implementation of hook_menu().
 */
function oc_partner_menu() {
  $items = array();

  $items['admin/workbench/content/institutions/add'] = array(
    'title' => 'Add institution',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add/partner', array('query' => array('destination' => 'admin/workbench/content/institutions'))),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function oc_partner_block_info() {
  $blocks['list-map-toggle'] = array(
    'info' => t('Partner: List - Map Toggle'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function oc_partner_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'list-map-toggle':
      $path = 'institutions';
      $content = '<div class="list-map-toggle">';

      $content .= l(theme('fonticon_icon', array('icon' => 'publication')) . t('List'), $path, array('html' => TRUE));
      $content .= l(theme('fonticon_icon', array('icon' => 'world')) . t('Map'), $path . '/map', array('html' => TRUE));
      $content .= '</div>';

      $block['subject'] = t('');
      $block['content'] = $content;
      break;

  }
  return $block;
}

/**
 * Implementation of template_preprocess_field().
 */
function oc_partner_preprocess_field(&$variables) {
  if (in_array($variables['element']['#view_mode'], array('full'))) {

    // replace the researcher URL title with the label
    if ($variables['element']['#field_name'] == 'field_partner_address') {
      foreach (array_keys($variables['items']) as $key) {
        $variables['items'][$key]['#prefix'] = theme('fonticon_icon', array('icon' => 'house'));
      }
    }
  }
  // // Turn the partner logo into a link referincing the partner's website
  // if ($variables['element']['#field_name'] == 'field_partner_logo' && in_array($variables['element']['#view_mode'], array('teaser_extended', 'teaser'))) {
  //   foreach (array_keys($variables['items']) as $key) {
  //     $wrapper = entity_metadata_wrapper('node', $variables['element']['#object']);
  //     $url = $wrapper->field_partner_url->value();
  //     if ($url) {
  //       $variables['items'][$key]['#prefix'] = '<a href="' . url($url['url']) .'" target="_blank" rel="nofollow">';
  //       $variables['items'][$key]['#suffix'] = '</a>';
  //     }
  //   }
  // }
}

/**
 * Implements hook_draggableviews_handler_native_arguments_alter().
 * Save ordered list without arguments, since that conflicts with our exposed filters.
 */
function oc_partner_draggableviews_handler_native_arguments_alter(&$arguments, $view, &$form_values) {
  // Empty arguments. See http://drupal.org/node/1447844#comment-5674082
  if ($view->name == "workbench_institution") {
    $arguments = array();
  }
}


/**
 * Implements entity_property_info_alter().
 *
 * We add a backreference field to all the profiles part of this partner. Will be used
 * for Search API indexing purposes, so that we can search on profiles starting from the partner.
 */
function oc_partner_entity_property_info_alter(&$info) {
  $info['node']['bundles']['partner']['properties']['partner_profiles'] = array(
    'label' => t("Partner Profile"),
    'description' => t("The profiles associated to this institution (reverse relationship)."),
    'type' => 'list<profile2>',
    'getter callback' => 'oc_partner_get_profiles',
  );
}

/**
 * Entity API getter callback to retrieve all profiles starting from the partner.
 *
 * See oc_partner_entity_property_info_alter().
 */
function oc_partner_get_profiles($data, array $options, $name, $type, $info) {
  $profiles = array();

  if ($data->type == 'partner') {
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'profile2')
      ->entityCondition('bundle', 'researcher_profile')
      ->fieldCondition('field_rprofile_partner_ref', 'target_id', $data->nid, '=');

    $result = $query->execute();

    if (isset($result['profile2'])) {
      $profiles = profile2_load_multiple(array_keys($result['profile2']));
    }
  }

  return $profiles;
}

/**
 * Implements hook_migrate_api().
 */
function oc_partner_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'OCPartners' => array(
        'class_name' => 'OCPartners',
        'group_name' => 'OCMigrations'
      ),
    ),
  );
  return $api;
}

/**
 * Implements hook_field_default_fields_alter().
 *
 * Set the default image.
 */
function oc_partner_field_default_fields_alter(&$fields) {
  $image_field = 'node-partner-field_partner_logo';
  if (isset($fields[$image_field]['field_config']['settings']['default_image'])) {
    $fid = $fields[$image_field]['field_config']['settings']['default_image'];
    $fields[$image_field]['field_config']['settings']['default_image'] = variable_get('oc_partner_default_image_fid', $fid);
  }
}


