<?php
/**
 * @file
 * Code for the Events section feature.
 */

include_once('oc_events.features.inc');

/**
 * Implementation of hook_menu().
 */
function oc_events_menu() {
  $items = array();

  $items['admin/workbench/content/events/add'] = array(
    'title' => 'Add event',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add/event', array('query' => array('destination' => 'admin/workbench/content/events'))),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_preprocess_node().
 * Add a custom date variable.
 */
function oc_events_preprocess_node(&$vars) {
  $node = $vars['node'];

  switch($node->type) {
    case 'event':
      $wrapper = entity_metadata_wrapper('node', $node);
      $from = $wrapper->field_event_date->value->value();
      $to = $wrapper->field_event_date->value2->value();

      $html = '';
      if ($from) {
        $html = '<span class="date-wrapper">';
        $html .=
          '<span class="date-item date-from">' .
          '<span class="day">' . date('j', $from) . '</span> ' .
          '<span class="month">' . date('M', $from) . '</span> ' .
          '</span>';

        if ($from != $to) {
          $html .=
            '<span class="date-join"><span class="oc-icon" aria-hidden="true" data-icon="&#x2192;"></span></span>' .
            '<span class="date-item date-to">' .
            '<span class="day">' . date('j', $to) . '</span> ' .
            '<span class="month">' . date('M', $to) . '</span> ' .
            '</span>';
        }
        $html .= '<span class="date-item year">' . date('Y', $to) . '</span>';
        $html .= '</span>';

      }
      $vars['event_date_icons'] = $html;
      break;
  }
}

/**
 * Implementation of template_preprocess_field().
 */
function oc_events_preprocess_field(&$variables) {
  if (in_array($variables['element']['#view_mode'], array('full'))) {

    if ($variables['element']['#field_name'] == 'field_event_address') {
      foreach (array_keys($variables['items']) as $key) {
        $variables['items'][$key]['#prefix'] = theme('fonticon_icon', array('icon' => 'house'));
      }
    }

  }
}

/**
 * Implements hook_preprocess_views_more().
 */
function oc_events_preprocess_views_more(&$vars) {
  // arrow right on frontpage
  if (isset($vars['view']) && $vars['view']->name == 'events' && isset($vars['is_front']) && $vars['is_front'] == 'TRUE') {
    $vars['link_text'] = $vars['link_text'] . theme('fonticon_icon', array('icon' => 'arrow-right'));
  }
  // arrow left on other pages
  if (isset($vars['view']) && $vars['view']->name == 'events' && empty($vars['is_front'])) {
    $vars['link_text'] = theme('fonticon_icon', array('icon' => 'arrow-left')) . $vars['link_text'];
  }
}

/**
 * Implements hook_field_default_fields_alter().
 *
 * Set the default image.
 */
function oc_events_field_default_fields_alter(&$fields) {
  $image_field = 'node-event-field_event_imageteaser';
  if (isset($fields[$image_field]['field_config']['settings']['default_image'])) {
    $fid = $fields[$image_field]['field_config']['settings']['default_image'];
    $fields[$image_field]['field_config']['settings']['default_image'] = variable_get('oc_events_default_image_fid', $fid);
  }
}

/**
 * Implements hook_migrate_api().
 */
function oc_events_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'OCEvents' => array('class_name' => 'OCEvents'),
    ),
  );
  return $api;
}
